{"repository_name":"haversine","body":"# haversine\n\n[![Crystal CI](https://github.com/geocrystal/haversine/actions/workflows/crystal.yml/badge.svg)](https://github.com/geocrystal/haversine/actions/workflows/crystal.yml)\n[![GitHub release](https://img.shields.io/github/release/geocrystal/haversine.svg)](https://github.com/mamgeocrystalantoha/haversine/releases)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://geocrystal.github.io/haversine/)\n[![License](https://img.shields.io/github/license/geocrystal/haversine.svg)](https://github.com/geocrystal/haversine/blob/master/LICENSE)\n\nCrystal implementation of the [Haversine formula](https://en.wikipedia.org/wiki/Haversine_formula) to calculate distances between two points given their latitudes and longitudes.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     haversine:\n       github: geocrystal/haversine\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"haversine\"\n```\n\n### Distance\n\nCalling `Haversine.distance` with four latitude/longitude coordinates returns a `Haversine::Distance` object which can provide output in kilometers, meters, miles, feet, or nautical miles.\n\nEach \"coordinates\" member **must** be a pair of coordinates - `latitude` and `longitude`.\n\n`Haversine.distance` accepts of either:\n\n- `Haversine.distance(lat1, lon1, lat2, lon2)`\n- `Haversine.distance({lat1, lon1}, {lat2, lon2})`\n- `Haversine.distance([lat1, lon1], [lat2, lon2])`\n\n```crystal\n# Tokyo -> Paris\ndistance = Haversine.distance(35.61488, 139.5813, 48.85341, 2.3488)\n\ndistance.to_kilometers     # => 9715.470491159029\ndistance.to_meters         # => 9715470.491159027\ndistance.to_miles          # => 6032.710918698025\ndistance.to_feet           # => 31852713.65072557\ndistance.to_nautical_miles # => 5242.2799481204265\n```\n\nIf you have latitude/longitude pairs stored in an array or tuple, you can alternately provide two arrays/tuples when calling `Haversine.distance`:\n\n```crystal\nlondon = [51.500153, -0.126236]\nnew_york = [40.714268, -74.005974]\n\ndistance = Haversine.distance(new_york, london)\ndistance.to_kilometers # => 5570.482153929098\n\nlondon = {51.500153, -0.126236}\nnew_york = {40.714268, -74.005974}\n\ndistance = Haversine.distance(new_york, london)\ndistance.to_kilometers # => 5570.482153929098\n```\n\n![haversine](/assets/readme_image.png)\n\n<https://www.movable-type.co.uk/scripts/latlong.html>\n\nAlso you can compare `Haversine::Distance` objects:\n\n```crystal\nlondon = [51.500153, -0.126236]\nnew_york = [40.714268, -74.005974]\nshanghai = [31.222220, 121.458060]\n\ndistance1 = Haversine.distance(london, new_york)\ndistance2 = Haversine.distance(london, shanghai)\n\ndistance1 < distance2 # => true\n```\n\n### Destination\n\nTakes the starting point by `latitude`, `longitude` and calculates the location of a destination point\ngiven a `distance` factor in degrees, radians, miles, or kilometers; and `bearing` in degrees.\n\n```crystal\nHaversine.destination(39, -75, 5000, 90, :kilometers)\n# => {26.440010707631124, -22.885355549364313}\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/geocrystal/haversine/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Anton Maminov](https://github.com/mamantoha) - creator and maintainer\n","program":{"html_id":"haversine/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"haversine","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"haversine/Haversine","path":"Haversine.html","kind":"module","full_name":"Haversine","name":"Haversine","abstract":false,"locations":[{"filename":"src/haversine.cr","line_number":5,"url":null},{"filename":"src/haversine/distance.cr","line_number":1,"url":null},{"filename":"src/haversine/version.cr","line_number":1,"url":null}],"repository_name":"haversine","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"EARTH_RADIUS","name":"EARTH_RADIUS","value":"6371008.8"},{"id":"FACTORS","name":"FACTORS","value":"{centimeters: EARTH_RADIUS * 100, centimetres: EARTH_RADIUS * 100, degrees: 360 / (2 * Math::PI), feet: EARTH_RADIUS * 3.28084, inches: EARTH_RADIUS * 39.37, kilometers: EARTH_RADIUS / 1000, kilometres: EARTH_RADIUS / 1000, meters: EARTH_RADIUS, metres: EARTH_RADIUS, miles: EARTH_RADIUS / 1609.344, millimeters: EARTH_RADIUS * 1000, millimetres: EARTH_RADIUS * 1000, nautical_miles: EARTH_RADIUS / 1852, radians: 1, yards: EARTH_RADIUS * 1.0936}","doc":"Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n\nKeys are the name of the unit, values are the number of that unit in a single radians","summary":"<p>Unit of measurement factors using a spherical (non-ellipsoid) earth radius.</p>"},{"id":"VERSION","name":"VERSION","value":"{{ (`shards version /__w/haversine/haversine/src/haversine`).chomp.stringify }}"}],"extended_modules":[{"html_id":"haversine/Haversine","kind":"module","full_name":"Haversine","name":"Haversine"}],"doc":"The haversine formula determines the great-circle distance between two points on a sphere\ngiven their latitudes and longitudes.\n\nhttps://en.wikipedia.org/wiki/Haversine_formula","summary":"<p>The haversine formula determines the great-circle distance between two points on a sphere given their latitudes and longitudes.</p>","instance_methods":[{"html_id":"destination(latitude:Number,longitude:Number,distance:Number,bearing:Number,unit:Symbol=:kilometers):Tuple(Float64,Float64)-instance-method","name":"destination","doc":"Takes the staring point by `latitude`, `longitude` and calculates the location of a destination point\ngiven a `distance` factor in `Haversine::FACTORS`; and `bearing` in degrees(ranging from -180 to 180).\n\nhttps://github.com/Turfjs/turf/blob/master/packages/turf-destination/index.ts","summary":"<p>Takes the staring point by <code>latitude</code>, <code>longitude</code> and calculates the location of a destination point given a <code><a href=\"Haversine.html#distance%28lat1%3ANumber%2Clon1%3ANumber%2Clat2%3ANumber%2Clon2%3ANumber%29%3AHaversine%3A%3ADistance-instance-method\">#distance</a></code> factor in <code><a href=\"Haversine.html#FACTORS\">Haversine::FACTORS</a></code>; and <code>bearing</code> in degrees(ranging from -180 to 180).</p>","abstract":false,"args":[{"name":"latitude","external_name":"latitude","restriction":"Number"},{"name":"longitude","external_name":"longitude","restriction":"Number"},{"name":"distance","external_name":"distance","restriction":"Number"},{"name":"bearing","external_name":"bearing","restriction":"Number"},{"name":"unit","default_value":":kilometers","external_name":"unit","restriction":"Symbol"}],"args_string":"(latitude : Number, longitude : Number, distance : Number, bearing : Number, unit : Symbol = :kilometers) : Tuple(Float64, Float64)","args_html":"(latitude : <a href=\"Haversine/Number.html\">Number</a>, longitude : <a href=\"Haversine/Number.html\">Number</a>, distance : <a href=\"Haversine/Number.html\">Number</a>, bearing : <a href=\"Haversine/Number.html\">Number</a>, unit : Symbol = <span class=\"n\">:kilometers</span>) : Tuple(Float64, Float64)","location":{"filename":"src/haversine.cr","line_number":69,"url":null},"def":{"name":"destination","args":[{"name":"latitude","external_name":"latitude","restriction":"Number"},{"name":"longitude","external_name":"longitude","restriction":"Number"},{"name":"distance","external_name":"distance","restriction":"Number"},{"name":"bearing","external_name":"bearing","restriction":"Number"},{"name":"unit","default_value":":kilometers","external_name":"unit","restriction":"Symbol"}],"return_type":"Tuple(Float64, Float64)","visibility":"Public","body":"factor = FACTORS[unit]\nradians = distance / factor\nbearing_rad = to_radians(bearing)\nlatitude1 = to_radians(latitude)\nlongitude1 = to_radians(longitude)\nlatitude2 = Math.asin(((Math.sin(latitude1)) * (Math.cos(radians))) + (((Math.cos(latitude1)) * (Math.sin(radians))) * (Math.cos(bearing_rad))))\nlongitude2 = longitude1 + (Math.atan2(((Math.sin(bearing_rad)) * (Math.sin(radians))) * (Math.cos(latitude1)), (Math.cos(radians)) - ((Math.sin(latitude1)) * (Math.sin(latitude2)))))\n{to_degrees(latitude2), to_degrees(longitude2)}\n"}},{"html_id":"destination(coord:Array(Number),distance:Number,bearing:Number,unit:Symbol=:kilometers):Tuple(Float64,Float64)-instance-method","name":"destination","doc":"Takes the staring point by `latitude`, `longitude` and calculates the location of a destination point\ngiven a `distance` factor in `Haversine::FACTORS`; and `bearing` in degrees(ranging from -180 to 180).\n\nhttps://github.com/Turfjs/turf/blob/master/packages/turf-destination/index.ts","summary":"<p>Takes the staring point by <code>latitude</code>, <code>longitude</code> and calculates the location of a destination point given a <code><a href=\"Haversine.html#distance%28lat1%3ANumber%2Clon1%3ANumber%2Clat2%3ANumber%2Clon2%3ANumber%29%3AHaversine%3A%3ADistance-instance-method\">#distance</a></code> factor in <code><a href=\"Haversine.html#FACTORS\">Haversine::FACTORS</a></code>; and <code>bearing</code> in degrees(ranging from -180 to 180).</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"Array(Number)"},{"name":"distance","external_name":"distance","restriction":"Number"},{"name":"bearing","external_name":"bearing","restriction":"Number"},{"name":"unit","default_value":":kilometers","external_name":"unit","restriction":"Symbol"}],"args_string":"(coord : Array(Number), distance : Number, bearing : Number, unit : Symbol = :kilometers) : Tuple(Float64, Float64)","args_html":"(coord : Array(<a href=\"Haversine/Number.html\">Number</a>), distance : <a href=\"Haversine/Number.html\">Number</a>, bearing : <a href=\"Haversine/Number.html\">Number</a>, unit : Symbol = <span class=\"n\">:kilometers</span>) : Tuple(Float64, Float64)","location":{"filename":"src/haversine.cr","line_number":94,"url":null},"def":{"name":"destination","args":[{"name":"coord","external_name":"coord","restriction":"Array(Number)"},{"name":"distance","external_name":"distance","restriction":"Number"},{"name":"bearing","external_name":"bearing","restriction":"Number"},{"name":"unit","default_value":":kilometers","external_name":"unit","restriction":"Symbol"}],"return_type":"Tuple(Float64, Float64)","visibility":"Public","body":"latitude, longitude = coord\ndestination(latitude, longitude, distance, bearing, unit)\n"}},{"html_id":"destination(coord:Tuple(Number,Number),distance:Number,bearing:Number,unit:Symbol=:kilometers):Tuple(Float64,Float64)-instance-method","name":"destination","doc":"Takes the staring point by `latitude`, `longitude` and calculates the location of a destination point\ngiven a `distance` factor in `Haversine::FACTORS`; and `bearing` in degrees(ranging from -180 to 180).\n\nhttps://github.com/Turfjs/turf/blob/master/packages/turf-destination/index.ts","summary":"<p>Takes the staring point by <code>latitude</code>, <code>longitude</code> and calculates the location of a destination point given a <code><a href=\"Haversine.html#distance%28lat1%3ANumber%2Clon1%3ANumber%2Clat2%3ANumber%2Clon2%3ANumber%29%3AHaversine%3A%3ADistance-instance-method\">#distance</a></code> factor in <code><a href=\"Haversine.html#FACTORS\">Haversine::FACTORS</a></code>; and <code>bearing</code> in degrees(ranging from -180 to 180).</p>","abstract":false,"args":[{"name":"coord","external_name":"coord","restriction":"Tuple(Number, Number)"},{"name":"distance","external_name":"distance","restriction":"Number"},{"name":"bearing","external_name":"bearing","restriction":"Number"},{"name":"unit","default_value":":kilometers","external_name":"unit","restriction":"Symbol"}],"args_string":"(coord : Tuple(Number, Number), distance : Number, bearing : Number, unit : Symbol = :kilometers) : Tuple(Float64, Float64)","args_html":"(coord : Tuple(<a href=\"Haversine/Number.html\">Number</a>, <a href=\"Haversine/Number.html\">Number</a>), distance : <a href=\"Haversine/Number.html\">Number</a>, bearing : <a href=\"Haversine/Number.html\">Number</a>, unit : Symbol = <span class=\"n\">:kilometers</span>) : Tuple(Float64, Float64)","location":{"filename":"src/haversine.cr","line_number":101,"url":null},"def":{"name":"destination","args":[{"name":"coord","external_name":"coord","restriction":"Tuple(Number, Number)"},{"name":"distance","external_name":"distance","restriction":"Number"},{"name":"bearing","external_name":"bearing","restriction":"Number"},{"name":"unit","default_value":":kilometers","external_name":"unit","restriction":"Symbol"}],"return_type":"Tuple(Float64, Float64)","visibility":"Public","body":"latitude, longitude = coord\ndestination(latitude, longitude, distance, bearing, unit)\n"}},{"html_id":"distance(lat1:Number,lon1:Number,lat2:Number,lon2:Number):Haversine::Distance-instance-method","name":"distance","doc":"Calculates the haversine distance between two locations using latitude and longitude.","summary":"<p>Calculates the haversine distance between two locations using latitude and longitude.</p>","abstract":false,"args":[{"name":"lat1","external_name":"lat1","restriction":"Number"},{"name":"lon1","external_name":"lon1","restriction":"Number"},{"name":"lat2","external_name":"lat2","restriction":"Number"},{"name":"lon2","external_name":"lon2","restriction":"Number"}],"args_string":"(lat1 : Number, lon1 : Number, lat2 : Number, lon2 : Number) : Haversine::Distance","args_html":"(lat1 : <a href=\"Haversine/Number.html\">Number</a>, lon1 : <a href=\"Haversine/Number.html\">Number</a>, lat2 : <a href=\"Haversine/Number.html\">Number</a>, lon2 : <a href=\"Haversine/Number.html\">Number</a>) : <a href=\"Haversine/Distance.html\">Haversine::Distance</a>","location":{"filename":"src/haversine.cr","line_number":34,"url":null},"def":{"name":"distance","args":[{"name":"lat1","external_name":"lat1","restriction":"Number"},{"name":"lon1","external_name":"lon1","restriction":"Number"},{"name":"lat2","external_name":"lat2","restriction":"Number"},{"name":"lon2","external_name":"lon2","restriction":"Number"}],"return_type":"Haversine::Distance","visibility":"Public","body":"dlon = to_radians(lon2 - lon1)\ndlat = to_radians(lat2 - lat1)\nlat1 = to_radians(lat1)\nlat2 = to_radians(lat2)\na = ((Math.sin(dlat / 2)) ** 2) + ((((Math.sin(dlon / 2)) ** 2) * (Math.cos(lat1))) * (Math.cos(lat2)))\nc = 2 * (Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)))\nHaversine::Distance.new(c)\n"}},{"html_id":"distance(coord1:Array(Number),coord2:Array(Number)):Haversine::Distance-instance-method","name":"distance","doc":"Calculates the haversine distance between two locations using latitude and longitude.","summary":"<p>Calculates the haversine distance between two locations using latitude and longitude.</p>","abstract":false,"args":[{"name":"coord1","external_name":"coord1","restriction":"Array(Number)"},{"name":"coord2","external_name":"coord2","restriction":"Array(Number)"}],"args_string":"(coord1 : Array(Number), coord2 : Array(Number)) : Haversine::Distance","args_html":"(coord1 : Array(<a href=\"Haversine/Number.html\">Number</a>), coord2 : Array(<a href=\"Haversine/Number.html\">Number</a>)) : <a href=\"Haversine/Distance.html\">Haversine::Distance</a>","location":{"filename":"src/haversine.cr","line_number":50,"url":null},"def":{"name":"distance","args":[{"name":"coord1","external_name":"coord1","restriction":"Array(Number)"},{"name":"coord2","external_name":"coord2","restriction":"Array(Number)"}],"return_type":"Haversine::Distance","visibility":"Public","body":"lat1, lon1 = coord1\nlat2, lon2 = coord2\ndistance(lat1, lon1, lat2, lon2)\n"}},{"html_id":"distance(coord1:Tuple(Number,Number),coord2:Tuple(Number,Number)):Haversine::Distance-instance-method","name":"distance","doc":"Calculates the haversine distance between two locations using latitude and longitude.","summary":"<p>Calculates the haversine distance between two locations using latitude and longitude.</p>","abstract":false,"args":[{"name":"coord1","external_name":"coord1","restriction":"Tuple(Number, Number)"},{"name":"coord2","external_name":"coord2","restriction":"Tuple(Number, Number)"}],"args_string":"(coord1 : Tuple(Number, Number), coord2 : Tuple(Number, Number)) : Haversine::Distance","args_html":"(coord1 : Tuple(<a href=\"Haversine/Number.html\">Number</a>, <a href=\"Haversine/Number.html\">Number</a>), coord2 : Tuple(<a href=\"Haversine/Number.html\">Number</a>, <a href=\"Haversine/Number.html\">Number</a>)) : <a href=\"Haversine/Distance.html\">Haversine::Distance</a>","location":{"filename":"src/haversine.cr","line_number":58,"url":null},"def":{"name":"distance","args":[{"name":"coord1","external_name":"coord1","restriction":"Tuple(Number, Number)"},{"name":"coord2","external_name":"coord2","restriction":"Tuple(Number, Number)"}],"return_type":"Haversine::Distance","visibility":"Public","body":"lat1, lon1 = coord1\nlat2, lon2 = coord2\ndistance(lat1, lon1, lat2, lon2)\n"}}],"types":[{"html_id":"haversine/Haversine/Distance","path":"Haversine/Distance.html","kind":"class","full_name":"Haversine::Distance","name":"Distance","abstract":false,"superclass":{"html_id":"haversine/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"haversine/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"haversine/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"haversine/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/haversine/distance.cr","line_number":2,"url":null}],"repository_name":"haversine","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"haversine/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"namespace":{"html_id":"haversine/Haversine","kind":"module","full_name":"Haversine","name":"Haversine"},"class_methods":[{"html_id":"zero:Haversine::Distance-class-method","name":"zero","abstract":false,"location":{"filename":"src/haversine/distance.cr","line_number":20,"url":null},"def":{"name":"zero","return_type":"Haversine::Distance","visibility":"Public","body":"new(0)"}}],"constructors":[{"html_id":"new(distance:Number)-class-method","name":"new","abstract":false,"args":[{"name":"distance","external_name":"distance","restriction":"Number"}],"args_string":"(distance : Number)","args_html":"(distance : <a href=\"../Haversine/Number.html\">Number</a>)","location":{"filename":"src/haversine/distance.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"distance","external_name":"distance","restriction":"Number"}],"visibility":"Public","body":"_ = allocate\n_.initialize(distance)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"+(other:Haversine::Distance):Haversine::Distance-instance-method","name":"+","doc":"Adds the value of `self` to *other*.","summary":"<p>Adds the value of <code>self</code> to <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Haversine::Distance"}],"args_string":"(other : Haversine::Distance) : Haversine::Distance","args_html":"(other : <a href=\"../Haversine/Distance.html\">Haversine::Distance</a>) : <a href=\"../Haversine/Distance.html\">Haversine::Distance</a>","location":{"filename":"src/haversine/distance.cr","line_number":25,"url":null},"def":{"name":"+","args":[{"name":"other","external_name":"other","restriction":"Haversine::Distance"}],"return_type":"Haversine::Distance","visibility":"Public","body":"Haversine::Distance.new(distance + other.distance)"}},{"html_id":"-(other:Haversine::Distance):Haversine::Distance-instance-method","name":"-","doc":"Removes the value of *other* from `self`.","summary":"<p>Removes the value of <em>other</em> from <code>self</code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Haversine::Distance"}],"args_string":"(other : Haversine::Distance) : Haversine::Distance","args_html":"(other : <a href=\"../Haversine/Distance.html\">Haversine::Distance</a>) : <a href=\"../Haversine/Distance.html\">Haversine::Distance</a>","location":{"filename":"src/haversine/distance.cr","line_number":30,"url":null},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":"Haversine::Distance"}],"return_type":"Haversine::Distance","visibility":"Public","body":"Haversine::Distance.new(distance - other.distance)"}},{"html_id":"<=>(other:Haversine::Distance)-instance-method","name":"<=>","doc":"The comparison operator. Returns `0` if the two objects are equal,\na negative number if this object is considered less than *other*,\na positive number if this object is considered greater than *other*,\nor `nil` if the two objects are not comparable.\n\nSubclasses define this method to provide class-specific ordering.\n\nThe comparison operator is usually used to sort values:\n\n```\n# Sort in a descending way:\n[3, 1, 2].sort { |x, y| y <=> x } # => [3, 2, 1]\n\n# Sort in an ascending way:\n[3, 1, 2].sort { |x, y| x <=> y } # => [1, 2, 3]\n```","summary":"<p>The comparison operator.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Haversine::Distance"}],"args_string":"(other : Haversine::Distance)","args_html":"(other : <a href=\"../Haversine/Distance.html\">Haversine::Distance</a>)","location":{"filename":"src/haversine/distance.cr","line_number":16,"url":null},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"Haversine::Distance"}],"visibility":"Public","body":"distance <=> other.distance"}},{"html_id":"distance:Float32|Float64|Int32-instance-method","name":"distance","abstract":false,"location":{"filename":"src/haversine/distance.cr","line_number":5,"url":null},"def":{"name":"distance","visibility":"Public","body":"@distance"}},{"html_id":"distance=(distance:Float32|Float64|Int32)-instance-method","name":"distance=","abstract":false,"args":[{"name":"distance","external_name":"distance","restriction":"::Float32 | ::Float64 | ::Int32"}],"args_string":"(distance : Float32 | Float64 | Int32)","args_html":"(distance : Float32 | Float64 | Int32)","location":{"filename":"src/haversine/distance.cr","line_number":5,"url":null},"def":{"name":"distance=","args":[{"name":"distance","external_name":"distance","restriction":"::Float32 | ::Float64 | ::Int32"}],"visibility":"Public","body":"@distance = distance"}},{"html_id":"to_centimeters:Number-instance-method","name":"to_centimeters","abstract":false,"location":{"filename":"src/haversine/distance.cr","line_number":10,"url":null},"def":{"name":"to_centimeters","return_type":"Number","visibility":"Public","body":"@distance * Haversine::FACTORS[:centimeters]"}},{"html_id":"to_centimetres:Number-instance-method","name":"to_centimetres","abstract":false,"location":{"filename":"src/haversine/distance.cr","line_number":10,"url":null},"def":{"name":"to_centimetres","return_type":"Number","visibility":"Public","body":"@distance * Haversine::FACTORS[:centimetres]"}},{"html_id":"to_degrees:Number-instance-method","name":"to_degrees","abstract":false,"location":{"filename":"src/haversine/distance.cr","line_number":10,"url":null},"def":{"name":"to_degrees","return_type":"Number","visibility":"Public","body":"@distance * Haversine::FACTORS[:degrees]"}},{"html_id":"to_feet:Number-instance-method","name":"to_feet","abstract":false,"location":{"filename":"src/haversine/distance.cr","line_number":10,"url":null},"def":{"name":"to_feet","return_type":"Number","visibility":"Public","body":"@distance * Haversine::FACTORS[:feet]"}},{"html_id":"to_inches:Number-instance-method","name":"to_inches","abstract":false,"location":{"filename":"src/haversine/distance.cr","line_number":10,"url":null},"def":{"name":"to_inches","return_type":"Number","visibility":"Public","body":"@distance * Haversine::FACTORS[:inches]"}},{"html_id":"to_kilometers:Number-instance-method","name":"to_kilometers","abstract":false,"location":{"filename":"src/haversine/distance.cr","line_number":10,"url":null},"def":{"name":"to_kilometers","return_type":"Number","visibility":"Public","body":"@distance * Haversine::FACTORS[:kilometers]"}},{"html_id":"to_kilometres:Number-instance-method","name":"to_kilometres","abstract":false,"location":{"filename":"src/haversine/distance.cr","line_number":10,"url":null},"def":{"name":"to_kilometres","return_type":"Number","visibility":"Public","body":"@distance * Haversine::FACTORS[:kilometres]"}},{"html_id":"to_meters:Number-instance-method","name":"to_meters","abstract":false,"location":{"filename":"src/haversine/distance.cr","line_number":10,"url":null},"def":{"name":"to_meters","return_type":"Number","visibility":"Public","body":"@distance * Haversine::FACTORS[:meters]"}},{"html_id":"to_metres:Number-instance-method","name":"to_metres","abstract":false,"location":{"filename":"src/haversine/distance.cr","line_number":10,"url":null},"def":{"name":"to_metres","return_type":"Number","visibility":"Public","body":"@distance * Haversine::FACTORS[:metres]"}},{"html_id":"to_miles:Number-instance-method","name":"to_miles","abstract":false,"location":{"filename":"src/haversine/distance.cr","line_number":10,"url":null},"def":{"name":"to_miles","return_type":"Number","visibility":"Public","body":"@distance * Haversine::FACTORS[:miles]"}},{"html_id":"to_millimeters:Number-instance-method","name":"to_millimeters","abstract":false,"location":{"filename":"src/haversine/distance.cr","line_number":10,"url":null},"def":{"name":"to_millimeters","return_type":"Number","visibility":"Public","body":"@distance * Haversine::FACTORS[:millimeters]"}},{"html_id":"to_millimetres:Number-instance-method","name":"to_millimetres","abstract":false,"location":{"filename":"src/haversine/distance.cr","line_number":10,"url":null},"def":{"name":"to_millimetres","return_type":"Number","visibility":"Public","body":"@distance * Haversine::FACTORS[:millimetres]"}},{"html_id":"to_nautical_miles:Number-instance-method","name":"to_nautical_miles","abstract":false,"location":{"filename":"src/haversine/distance.cr","line_number":10,"url":null},"def":{"name":"to_nautical_miles","return_type":"Number","visibility":"Public","body":"@distance * Haversine::FACTORS[:nautical_miles]"}},{"html_id":"to_radians:Number-instance-method","name":"to_radians","abstract":false,"location":{"filename":"src/haversine/distance.cr","line_number":10,"url":null},"def":{"name":"to_radians","return_type":"Number","visibility":"Public","body":"@distance * Haversine::FACTORS[:radians]"}},{"html_id":"to_yards:Number-instance-method","name":"to_yards","abstract":false,"location":{"filename":"src/haversine/distance.cr","line_number":10,"url":null},"def":{"name":"to_yards","return_type":"Number","visibility":"Public","body":"@distance * Haversine::FACTORS[:yards]"}}]},{"html_id":"haversine/Haversine/Number","path":"Haversine/Number.html","kind":"alias","full_name":"Haversine::Number","name":"Number","abstract":false,"locations":[{"filename":"src/haversine.cr","line_number":31,"url":null}],"repository_name":"haversine","program":false,"enum":false,"alias":true,"aliased":"(Float32 | Float64 | Int32)","aliased_html":"Float32 | Float64 | Int32","const":false,"namespace":{"html_id":"haversine/Haversine","kind":"module","full_name":"Haversine","name":"Haversine"}}]}]}}